//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2025.07.08 at 09:05:39 AM UTC 
//


package com.example.pcit.wsdl;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ModeCodeType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ModeCodeType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="0"/&gt;
 *     &lt;enumeration value="1"/&gt;
 *     &lt;enumeration value="2"/&gt;
 *     &lt;enumeration value="3"/&gt;
 *     &lt;enumeration value="4"/&gt;
 *     &lt;enumeration value="5"/&gt;
 *     &lt;enumeration value="8"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "ModeCodeType", namespace = "gov:usda:aphis:pcit:PCIT_TransportModeCode")
@XmlEnum
public enum ModeCodeType {


    /**
     * Transport mode not specified
     * 
     */
    @XmlEnumValue("0")
    ZERO("0"),

    /**
     * Maritime transport
     * 
     */
    @XmlEnumValue("1")
    ONE("1"),

    /**
     * Rail transport
     * 
     */
    @XmlEnumValue("2")
    TWO("2"),

    /**
     * Road transport
     * 
     */
    @XmlEnumValue("3")
    THREE("3"),

    /**
     * Air transport
     * 
     */
    @XmlEnumValue("4")
    FOUR("4"),

    /**
     * Mail
     * 
     */
    @XmlEnumValue("5")
    FIVE("5"),

    /**
     * Inland water transport
     * 
     */
    @XmlEnumValue("8")
    EIGHT("8");
    private final String value;

    ModeCodeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ModeCodeType fromValue(String v) {
        for (ModeCodeType c: ModeCodeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
